// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    Not(in = address[6], out = notAddress0);
    Not(in = address[7], out = notAddress1);
    Not(in = address[8], out = notAddress2);

    // 0 0 0
    And(a = notAddress0, b = notAddress1, out = notAddress0AndNotAddress1);
    And(a = notAddress0AndNotAddress1, b = notAddress2, out = notAddress0AndNotAddress1AndNotAddress2);
    And(a = notAddress0AndNotAddress1AndNotAddress2, b = load, out = notAddress0AndNotAddress1AndNotAddress2AndLoad);

    // 0 0 1
	And(a = address[6], b = notAddress1, out = address0AndNotAddress1);
	And(a = address0AndNotAddress1, b = notAddress2, out = address0AndNotAddress1AndNotAddress2);
	And(a = address0AndNotAddress1AndNotAddress2, b = load, out = address0AndNotAddress1AndNotAddress2AndLoad);

	// 0 1 0
	And(a = notAddress0, b = address[7], out = notAddress0AndAddress1);
	And(a = notAddress0AndAddress1, b = notAddress2, out = notAddress0AndAddress1AndNotAddress2);
	And(a = notAddress0AndAddress1AndNotAddress2, b = load, out = notAddress0AndAddress1AndNotAddress2AndLoad);
	
	// 0 1 1
	And(a = address[6], b = address[7], out = address0AndAddress1);
	And(a = address0AndAddress1, b = notAddress2, out = address0AndAddress1AndNotAddress2);
	And(a = address0AndAddress1AndNotAddress2, b = load, out = address0AndAddress1AndNotAddress2AndLoad);
	
	// 1 0 0
	And(a = notAddress0AndNotAddress1, b = address[8], out = notAddress0AndNotAddress1AndAddress2);
	And(a = notAddress0AndNotAddress1AndAddress2, b = load, out = notAddress0AndNotAddress1AndAddress2AndLoad);

	// 1 0 1
	And(a = address0AndNotAddress1, b = address[8], out = address0AndNotAddress1AndAddress2);
	And(a = address0AndNotAddress1AndAddress2, b = load, out = address0AndNotAddress1AndAddress2AndLoad);

	// 1 1 0
	And(a = notAddress0AndAddress1, b = address[8], out = notAddress0AndAddress1AndAddress2);
	And(a = notAddress0AndAddress1AndAddress2, b = load, out = notAddress0AndAddress1AndAddress2AndLoad);

	// 1 1 1
	And(a = address0AndAddress1, b = address[8], out = address0AndAddress1AndAddress2);
	And(a = address0AndAddress1AndAddress2, b = load, out = address0AndAddress1AndAddress2AndLoad);

	RAM64(in[0..15] = in, load = notAddress0AndNotAddress1AndNotAddress2AndLoad, address = address[0..5], out = out0);
	RAM64(in[0..15] = in, load = address0AndNotAddress1AndNotAddress2AndLoad, address = address[0..5], out = out1);
	RAM64(in[0..15] = in, load = notAddress0AndAddress1AndNotAddress2AndLoad, address = address[0..5], out = out2);
	RAM64(in[0..15] = in, load = address0AndAddress1AndNotAddress2AndLoad, address = address[0..5], out = out3);
	RAM64(in[0..15] = in, load = notAddress0AndNotAddress1AndAddress2AndLoad, address = address[0..5], out = out4);
	RAM64(in[0..15] = in, load = address0AndNotAddress1AndAddress2AndLoad, address = address[0..5], out = out5);
	RAM64(in[0..15] = in, load = notAddress0AndAddress1AndAddress2AndLoad, address = address[0..5], out = out6);
	RAM64(in[0..15] = in, load = address0AndAddress1AndAddress2AndLoad, address = address[0..5], out = out7);
	
	Mux8Way16(a = out0, b = out1, c = out2, d = out3, e = out4, f = out5, g = out6, h = out7, sel = address[6..8], out = out);
}